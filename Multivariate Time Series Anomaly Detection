{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "82c31c95",
   "metadata": {},
   "source": [
    "\n",
    "# Multivariate Time-Series Anomaly Detection (Compliant Ensemble: IForest + LOF + LSTM-AE)\n",
    "\n",
    "This notebook implements a compact **ensemble** for multivariate time-series anomaly detection:\n",
    "- **Isolation Forest (IForest)** — tree-based outlier detection\n",
    "- **Local Outlier Factor (LOF)** — density-based outlier detection\n",
    "- **LSTM Autoencoder (LSTM-AE)** — sequence-aware reconstruction anomaly detection\n",
    "\n",
    "It satisfies the following **requirements**:\n",
    "- Main entrypoint accepts `input_csv_path` and `output_csv_path`\n",
    "- Modular classes/functions, full **type hints**, and **docstrings**\n",
    "- PEP8-friendly structure\n",
    "- Robust **error handling**\n",
    "- **Edge cases**: all-normal data, anomalies in training, insufficient data, single-feature datasets, perfect predictions, large datasets (≤ 10,000 rows)\n",
    "- Output CSV includes: `abnormality_score` + `top_feature_1..top_feature_7` (8 columns)\n",
    "- Training-period calibration targets: mean < 10, max < 25\n",
    "- Smooth, stable scores (EWMA); jump diagnostics printed\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ff47dfa",
   "metadata": {},
   "source": [
    "## Project overview\n",
    "\n",
    "This notebook implements a multivariate time‑series anomaly detection pipeline based on the requirements defined in the accompanying project specification. The goal is to detect anomalies in sensor time‑series data, assign each row a degree of abnormality score on a 0–100 scale, and identify the most important features contributing to each anomaly. The pipeline follows a modular design: data loading and preprocessing; splitting a normal training window; training unsupervised models (Isolation Forest, Local Outlier Factor and an optional LSTM autoencoder); scoring the full dataset; calibrating scores to the 0–100 scale; smoothing scores to avoid sudden jumps; computing feature attributions (via SHAP when available); and writing results to a CSV with additional columns (`abnormality_score`, `top_feature_1` … `top_feature_7`).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7cce840d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# ========\n",
    "# Config\n",
    "# ========\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "INPUT_CSV = Path(\"C://Users//Garikipati Karthik//Downloads//81ce1f00-c3f4-4baa-9b57-006fad1875adTEP_Train_Test.csv\" )  # change path if needed\n",
    "OUTPUT_CSV = Path(\"C://Users//Garikipati Karthik//Downloads//test//Anomaly Detection Test//TEP_output_optimized_NEW_2.csv\") # where to save results\n",
    "\n",
    "# Timestamp column (set to None if absent)\n",
    "TIMESTAMP_COL: str | None = None  # e.g., \"Time\"\n",
    "\n",
    "# Training window indices (inclusive)\n",
    "TRAIN_START_INDEX: int = 0\n",
    "TRAIN_END_INDEX: int = 4320\n",
    "\n",
    "# LSTM settings\n",
    "USE_LSTM: bool = True\n",
    "SEQ_LEN: int = 30\n",
    "LSTM_HIDDEN: int = 64\n",
    "EPOCHS: int = 12\n",
    "BATCH_SIZE: int = 256\n",
    "LEARNING_RATE: float = 1e-3\n",
    "\n",
    "# Ensemble weights (auto-renormalized if a model is missing)\n",
    "W_IFOREST: float = 0.45\n",
    "W_LOF: float = 0.25\n",
    "W_LSTM: float = 0.30\n",
    "\n",
    "# Smoothing\n",
    "EWMA_ALPHA: float = 0.15\n",
    "\n",
    "# Edge-case thresholds and constraints\n",
    "MIN_REQUIRED_ROWS: int = 72 * 60  # assume per-minute sampling; adjust if needed\n",
    "TRAIN_OUTLIER_FRACTION_WARN: float = 0.05  # warn if >5% training points > 25\n",
    "ALL_NORMAL_P99_MAX: float = 20.0  # clamp p99 to <= 20 for all-normal\n",
    "EPSILON_NOISE: float = 1e-6       # avoid exact zero scores\n",
    "\n",
    "TOP_K_ATTRS: int = 7\n",
    "RANDOM_STATE: int = 42"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "eec6b9d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# =======\n",
    "# Imports\n",
    "# =======\n",
    "from __future__ import annotations\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "from dataclasses import dataclass\n",
    "from typing import Tuple, List, Dict, Optional\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from sklearn.ensemble import IsolationForest\n",
    "from sklearn.neighbors import LocalOutlierFactor\n",
    "from sklearn.preprocessing import RobustScaler\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "# LSTM Autoencoder (TensorFlow/Keras)\n",
    "try:\n",
    "    import tensorflow as tf\n",
    "    from tensorflow.keras import Model\n",
    "    from tensorflow.keras.layers import Input, LSTM, RepeatVector, TimeDistributed, Dense\n",
    "    from tensorflow.keras.optimizers import Adam\n",
    "    TF_AVAILABLE: bool = True\n",
    "except Exception:\n",
    "    TF_AVAILABLE = False\n",
    "    Model = object  # type: ignore\n",
    "    print(\"[INFO] TensorFlow not available. Set USE_LSTM=False or install TensorFlow to enable LSTM-AE.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f80dc381",
   "metadata": {},
   "source": [
    "## Data preprocessing\n",
    "\n",
    "This section defines helper functions and a `DataProcessor` class to load the input CSV, optionally parse a timestamp column, select numeric features, handle missing values and split the dataset into a normal training window and the full dataset. According to the project spec, all sensor columns should be numeric and missing values should be forward/backward filled.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cf0cad67",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# =========\n",
    "# Utilities\n",
    "# =========\n",
    "import time\n",
    "\n",
    "def log(msg: str) -> None:\n",
    "    \"\"\"Print a log message with a standard prefix.\n",
    "\n",
    "    Args:\n",
    "        msg: The message to print.\n",
    "    \"\"\"\n",
    "    print(f\"[LOG] {msg}\")\n",
    "\n",
    "def ewma(x: np.ndarray, alpha: float) -> np.ndarray:\n",
    "    \"\"\"Exponentially weighted moving average smoothing.\n",
    "\n",
    "    Args:\n",
    "        x: Array of scores.\n",
    "        alpha: Smoothing factor in [0, 1]. 0 disables smoothing.\n",
    "\n",
    "    Returns:\n",
    "        Smoothed array.\n",
    "    \"\"\"\n",
    "    if alpha <= 0:\n",
    "        return x.astype(float)\n",
    "    y = np.empty_like(x, dtype=float)\n",
    "    y[0] = float(x[0])\n",
    "    for i in range(1, len(x)):\n",
    "        y[i] = alpha * float(x[i]) + (1.0 - alpha) * y[i - 1]\n",
    "    return y\n",
    "\n",
    "def robust_zscores(X: np.ndarray) -> np.ndarray:\n",
    "    \"\"\"Compute robust z-scores using median and MAD per feature.\n",
    "\n",
    "    Args:\n",
    "        X: 2D array [n_samples, n_features].\n",
    "\n",
    "    Returns:\n",
    "        2D array of robust z-scores, same shape as X.\n",
    "    \"\"\"\n",
    "    med = np.median(X, axis=0)\n",
    "    mad = np.median(np.abs(X - med), axis=0) + 1e-9\n",
    "    return (X - med) / (1.4826 * mad)\n",
    "\n",
    "def calibrate_scores_to_0_100(train_scores: np.ndarray,\n",
    "                              all_scores: np.ndarray) -> Tuple[np.ndarray, Dict[str, float]]:\n",
    "    \"\"\"Calibrate raw anomaly scores to 0-100 with training anchors.\n",
    "\n",
    "    Ensures that training-period scores concentrate below 10 on average\n",
    "    and keep max below ~25 using percentile-based piecewise mapping.\n",
    "\n",
    "    Args:\n",
    "        train_scores: Raw scores for the training window.\n",
    "        all_scores: Raw scores for all samples.\n",
    "\n",
    "    Returns:\n",
    "        (scaled_all_scores, calibration_info)\n",
    "    \"\"\"\n",
    "    train_scores = np.asarray(train_scores, dtype=float)\n",
    "    all_scores = np.asarray(all_scores, dtype=float)\n",
    "\n",
    "    tmin = float(np.min(train_scores))\n",
    "    tmax = float(np.max(train_scores))\n",
    "    p50 = float(np.percentile(train_scores, 50))\n",
    "    p95 = float(np.percentile(train_scores, 95))\n",
    "\n",
    "    def _scale(s: float) -> float:\n",
    "        \"\"\"\n",
    "        Scale a 1D or 2D numpy/pandas structure to [0, 1] using min–max,\n",
    "        returning the scaled array and guarding against zero ranges.\n",
    "        \"\"\"\n",
    "        s = float(s)\n",
    "        if s <= p50:\n",
    "            denom = (p50 - tmin) if (p50 - tmin) != 0 else 1.0\n",
    "            return 5.0 * (s - tmin) / denom\n",
    "        elif s <= p95:\n",
    "            denom = (p95 - p50) if (p95 - p50) != 0 else 1.0\n",
    "            return 5.0 + 15.0 * (s - p50) / denom\n",
    "        else:\n",
    "            denom = (tmax - p95) if (tmax - p95) != 0 else 1.0\n",
    "            return 20.0 + 5.0 * (s - p95) / denom\n",
    "\n",
    "    scaled = np.array([_scale(s) for s in all_scores], dtype=float)\n",
    "    scaled = np.clip(scaled, 0.0, 100.0)\n",
    "    info = {\n",
    "        \"p50\": p50,\n",
    "        \"p95\": p95,\n",
    "        \"train_max\": tmax,\n",
    "        \"train_min\": tmin,\n",
    "        \"train_mean\": float(np.mean(train_scores)),\n",
    "    }\n",
    "    return scaled, info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "81f61b14",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# ================\n",
    "# Data Processing\n",
    "# ================\n",
    "\n",
    "@dataclass\n",
    "class DataProcessor:\n",
    "    \"\"\"Load and clean time-series tabular data.\n",
    "\n",
    "    Attributes:\n",
    "        timestamp_col: Optional name of the timestamp column.\n",
    "    \"\"\"\n",
    "    timestamp_col: Optional[str] = None\n",
    "\n",
    "    def load(self, path: Path) -> pd.DataFrame:\n",
    "        \"\"\"Load a CSV into a DataFrame.\n",
    "\n",
    "        Args:\n",
    "            path: CSV file path.\n",
    "\n",
    "        Returns:\n",
    "            Loaded DataFrame.\n",
    "        \"\"\"\n",
    "        log(f\"Loading CSV: {path}\")\n",
    "        df = pd.read_csv(path)\n",
    "        if df.empty:\n",
    "            raise ValueError(\"Input CSV has no rows.\")\n",
    "        return df\n",
    "\n",
    "    def clean(self, df: pd.DataFrame) -> pd.DataFrame:\n",
    "        \"\"\"Validate timestamp (if provided) and keep numeric columns.\n",
    "\n",
    "        Forward/backward fill missing values for numeric columns.\n",
    "\n",
    "        Args:\n",
    "            df: Raw DataFrame.\n",
    "\n",
    "        Returns:\n",
    "            Cleaned DataFrame.\n",
    "        \"\"\"\n",
    "        if self.timestamp_col and self.timestamp_col in df.columns:\n",
    "            df[self.timestamp_col] = pd.to_datetime(df[self.timestamp_col],\n",
    "                                                    errors=\"coerce\")\n",
    "            df = df.dropna(subset=[self.timestamp_col])\n",
    "\n",
    "        # Keep only numeric columns (and timestamp if present)\n",
    "        keep_cols: List[str] = []\n",
    "        for col in df.columns:\n",
    "            if col == self.timestamp_col:\n",
    "                keep_cols.append(col)\n",
    "            elif pd.api.types.is_numeric_dtype(df[col]):\n",
    "                keep_cols.append(col)\n",
    "\n",
    "        if not keep_cols or (len(keep_cols) == 1 and keep_cols[0] == self.timestamp_col):\n",
    "            raise ValueError(\"No numeric feature columns found in the dataset.\")\n",
    "\n",
    "        df = df[keep_cols].copy()\n",
    "\n",
    "        num_cols = [c for c in df.columns if c != self.timestamp_col]\n",
    "        df[num_cols] = df[num_cols].ffill().bfill().fillna(0.0)\n",
    "\n",
    "        if self.timestamp_col:\n",
    "            df = df.drop_duplicates(subset=[self.timestamp_col])\n",
    "\n",
    "        df = df.reset_index(drop=True)\n",
    "        return df\n",
    "\n",
    "    def split_train_full(self, df: pd.DataFrame, train_start: int,\n",
    "                         train_end: int) -> Tuple[pd.DataFrame, pd.DataFrame]:\n",
    "        \"\"\"Split DataFrame into training window and full dataset copies.\n",
    "\n",
    "        Args:\n",
    "            df: Clean DataFrame.\n",
    "            train_start: Start index (inclusive).\n",
    "            train_end: End index (inclusive).\n",
    "\n",
    "        Returns:\n",
    "            (train_df, full_df)\n",
    "        \"\"\"\n",
    "        if train_start < 0 or train_end >= len(df) or train_start > train_end:\n",
    "            raise ValueError(\"Invalid training window indices.\")\n",
    "        train = df.iloc[train_start:train_end + 1].copy()\n",
    "        full = df.copy()\n",
    "        return train, full"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c11cf548",
   "metadata": {},
   "source": [
    "## LSTM autoencoder\n",
    "\n",
    "An optional LSTM autoencoder can be trained on the normal training window to learn temporal patterns. Reconstruction errors serve as an additional anomaly score. If TensorFlow/Keras is not available the LSTM component will be skipped. You can control this behaviour with the `USE_LSTM` flag in the config.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1a9e6410",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# ==================\n",
    "# LSTM Autoencoder\n",
    "# ==================\n",
    "\n",
    "def make_sequences(X: np.ndarray, seq_len: int) -> np.ndarray:\n",
    "    \"\"\"Create sliding-window sequences for LSTM training/inference.\n",
    "\n",
    "    Args:\n",
    "        X: 2D array [n_samples, n_features].\n",
    "        seq_len: Sequence length in rows.\n",
    "\n",
    "    Returns:\n",
    "        3D array [n_sequences, seq_len, n_features].\n",
    "    \"\"\"\n",
    "    N, F = X.shape\n",
    "    if N < seq_len:\n",
    "        raise ValueError(f\"Not enough rows ({N}) for SEQ_LEN={seq_len}.\")\n",
    "    seqs = np.stack([X[i - seq_len:i, :] for i in range(seq_len, N)], axis=0)\n",
    "    return seqs\n",
    "\n",
    "def build_lstm_autoencoder(n_features: int, seq_len: int, hidden: int = 64,\n",
    "                           lr: float = 1e-3) -> Model:\n",
    "    \"\"\"Build a simple LSTM autoencoder for reconstruction.\n",
    "\n",
    "    Args:\n",
    "        n_features: Number of features.\n",
    "        seq_len: Sequence length.\n",
    "        hidden: Hidden units for encoder/decoder LSTM.\n",
    "        lr: Learning rate.\n",
    "\n",
    "    Returns:\n",
    "        Compiled Keras Model.\n",
    "    \"\"\"\n",
    "    inp = Input(shape=(seq_len, n_features))\n",
    "    x = LSTM(hidden, return_sequences=False)(inp)\n",
    "    x = RepeatVector(seq_len)(x)\n",
    "    x = LSTM(hidden, return_sequences=True)(x)\n",
    "    out = TimeDistributed(Dense(n_features))(x)\n",
    "    model = Model(inp, out)\n",
    "    model.compile(optimizer=Adam(learning_rate=lr), loss=\"mse\")\n",
    "    return model\n",
    "\n",
    "def lstm_reconstruction_errors(model: Model, seqs: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:\n",
    "    \"\"\"Compute reconstruction errors from an LSTM autoencoder.\n",
    "\n",
    "    Args:\n",
    "        model: Trained LSTM-AE model.\n",
    "        seqs: Input sequences.\n",
    "\n",
    "    Returns:\n",
    "        (mse_per_sequence, mean_abs_error_per_feature_per_sequence)\n",
    "    \"\"\"\n",
    "    recons = model.predict(seqs, verbose=0)\n",
    "    mse_seq = np.mean((recons - seqs) ** 2, axis=(1, 2))\n",
    "    feat_abs = np.mean(np.abs(recons - seqs), axis=1)  # shape (N_seq, n_features)\n",
    "    return mse_seq, feat_abs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68cea23a",
   "metadata": {},
   "source": [
    "## Model training and ensemble\n",
    "\n",
    "This section defines functions to fit an Isolation Forest, Local Outlier Factor (LOF) and the optional LSTM autoencoder on the training data. Data are first robustly scaled and optionally reduced in dimension using PCA for the LOF. The `score_models` function produces normalized anomaly scores for each model, and `ensemble_scores` combines them using configurable weights. Calibration and smoothing of scores are applied later in the pipeline.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f5f0686f",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# ==========================\n",
    "# Model Trainer & Ensemble\n",
    "# ==========================\n",
    "\n",
    "@dataclass\n",
    "class EnsembleModels:\n",
    "    \"\"\"Container for trained models and preprocessors.\"\"\"\n",
    "    iforest: IsolationForest\n",
    "    lof: LocalOutlierFactor\n",
    "    lstm_model: Optional[Model]\n",
    "    scaler: RobustScaler\n",
    "    pca: Optional[PCA]\n",
    "\n",
    "def fit_models(trainX: np.ndarray, use_lstm: bool, seq_len: int, hidden: int,\n",
    "               epochs: int, batch: int, lr: float) -> EnsembleModels:\n",
    "    \"\"\"Fit Isolation Forest, LOF (novelty), and optional LSTM-AE on training data.\n",
    "\n",
    "    Args:\n",
    "        trainX: Training array [n_train, n_features].\n",
    "        use_lstm: Whether to train LSTM-AE.\n",
    "        seq_len: Sequence length for LSTM-AE.\n",
    "        hidden: Hidden units for LSTM.\n",
    "        epochs: Training epochs for LSTM-AE.\n",
    "        batch: Batch size for LSTM-AE.\n",
    "        lr: Learning rate for LSTM-AE.\n",
    "\n",
    "    Returns:\n",
    "        EnsembleModels with fitted components.\n",
    "    \"\"\"\n",
    "    scaler = RobustScaler()\n",
    "    Xs = scaler.fit_transform(trainX)\n",
    "\n",
    "    pca: Optional[PCA] = None\n",
    "    if trainX.shape[1] > 50:\n",
    "        pca = PCA(n_components=min(50, trainX.shape[1]))\n",
    "        Xs_pca = pca.fit_transform(Xs)\n",
    "    else:\n",
    "        Xs_pca = Xs\n",
    "\n",
    "    iforest = IsolationForest(\n",
    "        n_estimators=256, contamination=\"auto\", bootstrap=False,\n",
    "        random_state=RANDOM_STATE\n",
    "    ).fit(Xs)\n",
    "\n",
    "    lof = LocalOutlierFactor(n_neighbors=35, contamination=\"auto\", novelty=True)\n",
    "    lof.fit(Xs_pca)\n",
    "\n",
    "    lstm_model: Optional[Model] = None\n",
    "    if use_lstm and TF_AVAILABLE:\n",
    "        seqs = make_sequences(Xs, seq_len)\n",
    "        lstm_model = build_lstm_autoencoder(trainX.shape[1], seq_len, hidden, lr)\n",
    "        lstm_model.fit(seqs, seqs, epochs=epochs, batch_size=batch,\n",
    "                       verbose=0, shuffle=True)\n",
    "    elif use_lstm and not TF_AVAILABLE:\n",
    "        log(\"[WARN] USE_LSTM=True but TensorFlow is not available. Skipping LSTM-AE.\")\n",
    "\n",
    "    return EnsembleModels(iforest=iforest, lof=lof, lstm_model=lstm_model,\n",
    "                          scaler=scaler, pca=pca)\n",
    "\n",
    "def score_models(models: EnsembleModels, X: np.ndarray, seq_len: int) -> Dict[str, np.ndarray]:\n",
    "    \"\"\"Compute normalized anomaly scores from available models.\n",
    "\n",
    "    Args:\n",
    "        models: Trained ensemble models and scalers.\n",
    "        X: Full array [n_samples, n_features].\n",
    "        seq_len: Sequence length for LSTM scoring.\n",
    "\n",
    "    Returns:\n",
    "        Dict with keys: 'iforest', 'lof', optionally 'lstm', '_lstm_feat_abs'.\n",
    "    \"\"\"\n",
    "    Xs = models.scaler.transform(X)\n",
    "    Xs_pca = models.pca.transform(Xs) if models.pca is not None else Xs\n",
    "\n",
    "    # Isolation Forest: higher = more anomalous\n",
    "    if_scores = -models.iforest.decision_function(Xs)\n",
    "    if_scores = (if_scores - float(np.min(if_scores))) / (float(np.ptp(if_scores)) + 1e-9)\n",
    "\n",
    "    # LOF: use score_samples (less negative = more outlier → invert sign)\n",
    "    lof_s = -models.lof.score_samples(Xs_pca)\n",
    "    lof_s = (lof_s - float(np.min(lof_s))) / (float(np.ptp(lof_s)) + 1e-9)\n",
    "\n",
    "    scores: Dict[str, np.ndarray] = {\"iforest\": if_scores, \"lof\": lof_s, \"lstm\": None}\n",
    "\n",
    "    if models.lstm_model is not None:\n",
    "        seqs = make_sequences(Xs, seq_len)\n",
    "        mse_seq, feat_abs = lstm_reconstruction_errors(models.lstm_model, seqs)\n",
    "        lstm_raw = np.zeros(Xs.shape[0], dtype=float)\n",
    "        lstm_raw[:seq_len] = float(mse_seq[0])\n",
    "        lstm_raw[seq_len:] = mse_seq\n",
    "        lstm_s = (lstm_raw - float(np.min(lstm_raw))) / (float(np.ptp(lstm_raw)) + 1e-9)\n",
    "        scores[\"lstm\"] = lstm_s\n",
    "        scores[\"_lstm_feat_abs\"] = feat_abs  # (N - seq_len, n_features)\n",
    "    return scores\n",
    "\n",
    "def ensemble_scores(scores: Dict[str, np.ndarray]) -> np.ndarray:\n",
    "    \"\"\"Weighted ensemble of available model scores in [0, 1].\n",
    "\n",
    "    Args:\n",
    "        scores: Dict of per-model normalized scores.\n",
    "\n",
    "    Returns:\n",
    "        1D array of ensemble scores.\n",
    "    \"\"\"\n",
    "    parts: List[np.ndarray] = []\n",
    "    weights: List[float] = []\n",
    "    if scores.get(\"iforest\") is not None:\n",
    "        parts.append(scores[\"iforest\"]); weights.append(W_IFOREST)\n",
    "    if scores.get(\"lof\") is not None:\n",
    "        parts.append(scores[\"lof\"]); weights.append(W_LOF)\n",
    "    if scores.get(\"lstm\") is not None:\n",
    "        parts.append(scores[\"lstm\"]); weights.append(W_LSTM)\n",
    "\n",
    "    if not parts:\n",
    "        raise RuntimeError(\"No model scores available to ensemble.\")\n",
    "\n",
    "    wsum = sum(weights) if weights else 1.0\n",
    "    weights = [w / wsum for w in weights] if weights else [1.0]\n",
    "\n",
    "    ens = np.zeros_like(parts[0], dtype=float)\n",
    "    for p, w in zip(parts, weights):\n",
    "        ens += w * p\n",
    "    return ens"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afd25fac",
   "metadata": {},
   "source": [
    "## Feature attribution and SHAP explanations\n",
    "\n",
    "To understand which sensors contribute most to each detected anomaly, this section computes feature attributions for every row. When the `shap` library is available, SHAP values for the Isolation Forest are computed with `shap.TreeExplainer`. Absolute SHAP values reflect each feature’s contribution to the anomaly score and can be combined with LSTM reconstruction errors. If SHAP is not installed, a fallback method ranks features by their robust z‑scores and, when available, LSTM reconstruction errors. The top `k` features are returned per row.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "959e0295",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# ==============================\n",
    "# Feature Attribution (with SHAP fallback)\n",
    "# ==============================\n",
    "\n",
    "def compute_feature_attributions(\n",
    "    df_num: pd.DataFrame,\n",
    "    scores: Dict[str, np.ndarray],\n",
    "    models: EnsembleModels,\n",
    "    seq_len: int,\n",
    "    top_k: int,\n",
    ") -> List[List[str]]:\n",
    "    \"\"\"Compute the top-`k` contributing features per row using SHAP when possible.\n",
    "\n",
    "    This function attempts to explain anomaly scores produced by the ensemble. When\n",
    "    the SHAP package is available, SHAP values for the Isolation Forest are\n",
    "    computed via ``shap.TreeExplainer`` on the scaled feature matrix. Absolute\n",
    "    SHAP values indicate each feature's contribution to the anomaly score. These can\n",
    "    optionally be blended with per-feature reconstruction errors from the LSTM\n",
    "    autoencoder. If SHAP is not installed, the function falls back to ranking\n",
    "    features by their robust z-scores and, when available, LSTM reconstruction\n",
    "    errors.\n",
    "\n",
    "    Args:\n",
    "        df_num: DataFrame of numeric features (no timestamp column).\n",
    "        scores: Dictionary containing raw anomaly scores and optional ``'_lstm_feat_abs'``.\n",
    "        models: Container with fitted models and scalers.\n",
    "        seq_len: Sequence length used for the LSTM autoencoder.\n",
    "        top_k: Number of top features to return.\n",
    "\n",
    "    Returns:\n",
    "        A list of length ``len(df_num)`` where each element is a list of the\n",
    "        ``top_k`` feature names contributing to that row's anomaly score.\n",
    "    \"\"\"\n",
    "    X = df_num.to_numpy(dtype=float)\n",
    "    Xs = models.scaler.transform(X)\n",
    "    n, _ = Xs.shape\n",
    "\n",
    "    # Try to compute SHAP values using TreeExplainer\n",
    "    shap_norm = None\n",
    "    try:\n",
    "        import shap  # type: ignore\n",
    "        explainer = shap.TreeExplainer(models.iforest)\n",
    "        shap_values = explainer.shap_values(Xs)\n",
    "        shap_abs = np.abs(shap_values)\n",
    "        shap_norm = shap_abs / (np.max(shap_abs, axis=0, keepdims=True) + 1e-9)\n",
    "    except Exception:\n",
    "        shap_norm = None\n",
    "\n",
    "    # Robust z-scores\n",
    "    rz = np.abs(robust_zscores(Xs))\n",
    "    rz_norm = rz / (np.max(rz, axis=0, keepdims=True) + 1e-9)\n",
    "\n",
    "    # LSTM contributions\n",
    "    lstm_feat: Optional[np.ndarray] = None\n",
    "    if \"_lstm_feat_abs\" in scores:\n",
    "        lstm_feat = np.zeros_like(rz)\n",
    "        feat_abs = scores[\"_lstm_feat_abs\"]\n",
    "        lstm_feat[:seq_len] = feat_abs[0]\n",
    "        lstm_feat[seq_len:] = feat_abs\n",
    "        lstm_feat = lstm_feat / (np.max(lstm_feat, axis=0, keepdims=True) + 1e-9)\n",
    "\n",
    "    if shap_norm is not None:\n",
    "        if lstm_feat is not None:\n",
    "            contrib = 0.7 * shap_norm + 0.3 * lstm_feat\n",
    "        else:\n",
    "            contrib = shap_norm\n",
    "    else:\n",
    "        if lstm_feat is not None:\n",
    "            contrib = 0.6 * rz_norm + 0.4 * lstm_feat\n",
    "        else:\n",
    "            contrib = rz_norm\n",
    "\n",
    "    cols = df_num.columns.to_numpy()\n",
    "    topk_names: List[List[str]] = []\n",
    "    for i in range(n):\n",
    "        idx_sorted = np.argsort(contrib[i])[::-1][:top_k]\n",
    "        topk_names.append(cols[idx_sorted].tolist())\n",
    "    return topk_names\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28b8248e",
   "metadata": {},
   "source": [
    "## Full anomaly detection pipeline\n",
    "\n",
    "The `run_pipeline` function orchestrates the end‑to‑end workflow: it loads and cleans the data, checks that the dataset is large enough (at least 72 hours of per‑minute samples, as recommended in the project spec), splits out the training window, fits the models, scores and calibrates the full dataset, smooths the scores, computes feature attributions, and writes the results to a CSV. It also prints diagnostic information to verify that the training scores meet the success criteria (mean < 10, max < 25) and warns if too many training points exceed the 25 threshold.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "2f3d97fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# ===============\n",
    "# Main Pipeline\n",
    "# ===============\n",
    "def run_pipeline(input_csv: Path,\n",
    "                 output_csv: Path,\n",
    "                 timestamp_col: Optional[str],\n",
    "                 train_start: int,\n",
    "                 train_end: int,\n",
    "                 use_lstm: bool,\n",
    "                 seq_len: int,\n",
    "                 hidden: int,\n",
    "                 epochs: int,\n",
    "                 batch_size: int,\n",
    "                 lr: float,\n",
    "                 ewma_alpha: float,\n",
    "                 top_k_attrs: int) -> None:\n",
    "    \"\"\"Run the full anomaly detection pipeline and write CSV output.\n",
    "\n",
    "    Args:\n",
    "        input_csv: Input CSV path.\n",
    "        output_csv: Output CSV path to write results.\n",
    "        timestamp_col: Optional timestamp column name.\n",
    "        train_start: Start index (inclusive) for training window.\n",
    "        train_end: End index (inclusive) for training window.\n",
    "        use_lstm: Whether to include LSTM-AE.\n",
    "        seq_len: Sequence length for LSTM-AE.\n",
    "        hidden: Hidden units for LSTM.\n",
    "        epochs: LSTM training epochs.\n",
    "        batch_size: LSTM batch size.\n",
    "        lr: LSTM learning rate.\n",
    "        ewma_alpha: Smoothing factor for scores.\n",
    "        top_k_attrs: Number of top feature names to output per row.\n",
    "    \"\"\"\n",
    "    t0 = time.time()\n",
    "    dp = DataProcessor(timestamp_col=timestamp_col)\n",
    "\n",
    "    # Load and clean\n",
    "    df_raw = dp.load(input_csv)\n",
    "    df = dp.clean(df_raw)\n",
    "\n",
    "    # Edge-case: dataset size requirement\n",
    "    if len(df) < MIN_REQUIRED_ROWS:\n",
    "        raise ValueError(\n",
    "            f\"Insufficient data: need at least {MIN_REQUIRED_ROWS} rows (~72 hours at 1-min cadence), \"\n",
    "            f\"got {len(df)}.\"\n",
    "        )\n",
    "\n",
    "    # Numeric columns only\n",
    "    num_cols = [c for c in df.columns if c != timestamp_col]\n",
    "    if not num_cols:\n",
    "        raise ValueError(\"No numeric columns available after cleaning.\")\n",
    "\n",
    "    # Split\n",
    "    train_df, full_df = dp.split_train_full(df, train_start, train_end)\n",
    "    train_num = train_df[num_cols].to_numpy(dtype=float)\n",
    "    full_num = full_df[num_cols].to_numpy(dtype=float)\n",
    "\n",
    "    log(f\"Train rows: {len(train_df)} | Full rows: {len(full_df)} | Features: {len(num_cols)}\")\n",
    "\n",
    "\n",
    "    # Fit models on training only\n",
    "    models = fit_models(trainX=train_num, use_lstm=use_lstm, seq_len=seq_len,\n",
    "                        hidden=hidden, epochs=epochs, batch=batch_size, lr=lr)\n",
    "\n",
    "    # Score on full dataset\n",
    "    raw_scores = score_models(models, full_num, seq_len=seq_len)\n",
    "    ens_raw = ensemble_scores(raw_scores)\n",
    "\n",
    "    # Calibration using training window\n",
    "    train_mask = np.zeros(len(full_df), dtype=bool)\n",
    "    train_mask[train_start:train_end + 1] = True\n",
    "    train_raw = ens_raw[train_mask]\n",
    "    scaled_0_100, calib_info = calibrate_scores_to_0_100(train_raw, ens_raw)\n",
    "\n",
    "    # Smooth\n",
    "    smoothed = ewma(scaled_0_100, ewma_alpha)\n",
    "\n",
    "    # Edge-case: all-normal clamp and epsilon noise\n",
    "    p99 = float(np.percentile(smoothed, 99))\n",
    "    if p99 < ALL_NORMAL_P99_MAX:\n",
    "        smoothed = np.minimum(smoothed, ALL_NORMAL_P99_MAX)\n",
    "    smoothed = smoothed + EPSILON_NOISE\n",
    "\n",
    "    # Jump diagnostics\n",
    "    jumps = np.abs(np.diff(smoothed, prepend=smoothed[0]))\n",
    "    max_jump = float(np.max(jumps))\n",
    "    pct_gt10 = float(100.0 * np.mean(jumps > 10.0))\n",
    "\n",
    "    log(f\"Calibration: {calib_info}\")\n",
    "    log(f\"Max consecutive jump: {max_jump:.2f} | % jumps > 10: {pct_gt10:.3f}%\")\n",
    "\n",
    "    # Training stats (success criteria)\n",
    "    train_scores = smoothed[train_mask]\n",
    "    mean_train = float(np.mean(train_scores))\n",
    "    max_train = float(np.max(train_scores))\n",
    "    print(\"=== Training Period Checks ===\")\n",
    "    print(f\"Mean score: {mean_train:.2f}  (target < 10)\")\n",
    "    print(f\"Max score:  {max_train:.2f}  (target < 25)\")\n",
    "\n",
    "    # Warn if too many training outliers (>25)\n",
    "    frac_train_gt25 = float(np.mean(train_scores > 25.0))\n",
    "    if frac_train_gt25 > TRAIN_OUTLIER_FRACTION_WARN:\n",
    "        print(\"[WARN] More than 5% of training-window points exceed 25. \"\n",
    "              \"Training period may contain anomalies.\")\n",
    "\n",
    "    # Feature attributions\n",
    "    topk = compute_feature_attributions(full_df[num_cols], raw_scores, models,\n",
    "                                        seq_len=seq_len, top_k=top_k_attrs)\n",
    "\n",
    "    # Assemble output\n",
    "    out = df.copy()\n",
    "    out[\"abnormality_score\"] = smoothed\n",
    "    for i in range(top_k_attrs):\n",
    "        out[f\"top_feature_{i + 1}\"] = [row[i] if i < len(row) else \"\" for row in topk]\n",
    "\n",
    "    out.to_csv(output_csv, index=False)\n",
    "    log(f\"Wrote: {output_csv}\")\n",
    "\n",
    "    dt = time.time() - t0\n",
    "    print(f\"Total runtime: {dt:.1f}s\")\n",
    "\n",
    "\n",
    "def main(input_csv_path: str | Path, output_csv_path: str | Path) -> None:\n",
    "    \"\"\"Convenience CLI-style entrypoint with only input/output paths.\n",
    "\n",
    "    Args:\n",
    "        input_csv_path: Path to input CSV.\n",
    "        output_csv_path: Path to output CSV to be written.\n",
    "    \"\"\"\n",
    "    run_pipeline(\n",
    "        input_csv=Path(input_csv_path),\n",
    "        output_csv=Path(output_csv_path),\n",
    "        timestamp_col=TIMESTAMP_COL,\n",
    "        train_start=TRAIN_START_INDEX,\n",
    "        train_end=TRAIN_END_INDEX,\n",
    "        use_lstm=USE_LSTM,\n",
    "        seq_len=SEQ_LEN,\n",
    "        hidden=LSTM_HIDDEN,\n",
    "        epochs=EPOCHS,\n",
    "        batch_size=BATCH_SIZE,\n",
    "        lr=LEARNING_RATE,\n",
    "        ewma_alpha=EWMA_ALPHA,\n",
    "        top_k_attrs=TOP_K_ATTRS,\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e55997a8",
   "metadata": {},
   "source": [
    "## Success criteria and running the pipeline\n",
    "\n",
    "According to the project requirements, a successful run should produce a training window where the mean abnormality score is below 10 and the maximum score is below 25. If more than 5% of training points exceed 25, the pipeline emits a warning. After running the pipeline you will find the `abnormality_score` and the top contributing features (`top_feature_1`…`top_feature_7`) appended to the input data.\n",
    "\n",
    "To execute the full pipeline on your own data you can call the `main` function or run the code cell below after updating `INPUT_CSV` and `OUTPUT_CSV` in the config. The results will be saved to the specified output path.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "11b1f72e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LOG] Loading CSV: C:\\Users\\Garikipati Karthik\\Downloads\\81ce1f00-c3f4-4baa-9b57-006fad1875adTEP_Train_Test.csv\n",
      "[LOG] Train rows: 4321 | Full rows: 26400 | Features: 52\n",
      "[LOG] Calibration: {'p50': 0.09411971383194555, 'p95': 0.15824427446808256, 'train_max': 0.22820478963849414, 'train_min': 0.002681431514688015, 'train_mean': 0.09772911061730782}\n",
      "[LOG] Max consecutive jump: 6.76 | % jumps > 10: 0.000%\n",
      "=== Training Period Checks ===\n",
      "Mean score: 7.63  (target < 10)\n",
      "Max score:  23.01  (target < 25)\n",
      "[LOG] Wrote: C:\\Users\\Garikipati Karthik\\Downloads\\test\\Anomaly Detection Test\\TEP_output_optimized_NEW_2.csv\n",
      "Total runtime: 79.9s\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# =====\n",
    "# Run \n",
    "# =====\n",
    "if __name__ == \"__main__\":\n",
    "    # call: main(INPUT_CSV, OUTPUT_CSV)\n",
    "    run_pipeline(\n",
    "        input_csv=INPUT_CSV,\n",
    "        output_csv=OUTPUT_CSV,\n",
    "        timestamp_col=TIMESTAMP_COL,\n",
    "        train_start=TRAIN_START_INDEX,\n",
    "        train_end=TRAIN_END_INDEX,\n",
    "        use_lstm=USE_LSTM,\n",
    "        seq_len=SEQ_LEN,\n",
    "        hidden=LSTM_HIDDEN,\n",
    "        epochs=EPOCHS,\n",
    "        batch_size=BATCH_SIZE,\n",
    "        lr=LEARNING_RATE,\n",
    "        ewma_alpha=EWMA_ALPHA,\n",
    "        top_k_attrs=TOP_K_ATTRS,\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e82b2ce7",
   "metadata": {},
   "source": [
    "# Visualization & Reporting Add‑Ons\n",
    "\n",
    "This section provides analysis with:\n",
    "1. **Interactive anomaly plots** over time (with severity bands)\n",
    "2. **Feature attribution heatmaps** (weighted by rank of top contributors)\n",
    "3. **Automatic anomaly severity reports** (counts, percentages, top features)\n",
    "\n",
    "> Works directly with generated CSV containing `abnormality_score` and `top_feature_1..7`.\n",
    ">\n",
    "> If the notebook already holds a DataFrame with these columns, set `results_df` to it; otherwise, point to the output CSV path.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b4c5172e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# === CONFIG / INPUT ===\n",
    "# If DataFrame with anomaly results is present (including abnormality_score and top_feature_1..7),\n",
    "# assign it to `results_df` before running this cell. Otherwise, set `OUTPUT_CSV_PATH` to the CSV produced by your pipeline.\n",
    "from typing import Optional, List, Dict, Tuple\n",
    "import pandas as pd\n",
    "import re\n",
    "import numpy as np\n",
    "\n",
    "# Try to auto-detect a results CSV; fallback to the known path if present.\n",
    "# Overide to actual output path.\n",
    "AUTO_CANDIDATES = [\n",
    "    # current session (update if necessary)\n",
    "    \"C://Users//Garikipati Karthik//Downloads//test//Anomaly Detection Test//TEP_output_optimized_NEW_2.csv\",\n",
    "]\n",
    "\n",
    "OUTPUT_CSV_PATH = None\n",
    "for _p in AUTO_CANDIDATES:\n",
    "    try:\n",
    "        import os\n",
    "        if os.path.exists(_p) and os.path.getsize(_p) > 0:\n",
    "            OUTPUT_CSV_PATH = _p\n",
    "            break\n",
    "    except Exception:\n",
    "        pass\n",
    "\n",
    "# Use an existing DataFrame if provided in the notebook; else load from CSV\n",
    "try:\n",
    "    results_df  # type: ignore\n",
    "except NameError:\n",
    "    results_df = None  # will try to load\n",
    "\n",
    "if results_df is None:\n",
    "    assert OUTPUT_CSV_PATH is not None, \"Please set OUTPUT_CSV_PATH to your results CSV.\"\n",
    "    results_df = pd.read_csv(OUTPUT_CSV_PATH)\n",
    "\n",
    "required_cols = [\"abnormality_score\"]\n",
    "for c in required_cols:\n",
    "    assert c in results_df.columns, f\"Missing required column: {c}\"\n",
    "\n",
    "# Try to find timestamp/datetime column\n",
    "def detect_time_column(df: pd.DataFrame) -> Optional[str]:\n",
    "    # Prefer obvious names\n",
    "    candidates = [c for c in df.columns if c.lower() in (\"timestamp\", \"time\", \"datetime\", \"date\", \"ts\")]\n",
    "    # Otherwise, heuristic: columns containing 'time' or 'date'\n",
    "    if not candidates:\n",
    "        candidates = [c for c in df.columns if (\"time\" in c.lower() or \"date\" in c.lower())]\n",
    "    # Validate: convertible to datetime for a subset\n",
    "    for c in candidates:\n",
    "        try:\n",
    "            pd.to_datetime(df[c].head(10), errors=\"raise\")\n",
    "            return c\n",
    "        except Exception:\n",
    "            continue\n",
    "    return None\n",
    "\n",
    "TIME_COL = detect_time_column(results_df)\n",
    "if TIME_COL is not None:\n",
    "    results_df[TIME_COL] = pd.to_datetime(results_df[TIME_COL], errors=\"coerce\")\n",
    "\n",
    "# Fill NA abnormality scores with 0\n",
    "results_df[\"abnormality_score\"] = pd.to_numeric(results_df[\"abnormality_score\"], errors=\"coerce\").fillna(0.0)\n",
    "\n",
    "# Create severity label\n",
    "def score_to_severity(s: float) -> str:\n",
    "    if s <= 10:\n",
    "        return \"0–10 • Normal\"\n",
    "    if s <= 30:\n",
    "        return \"11–30 • Slightly unusual\"\n",
    "    if s <= 60:\n",
    "        return \"31–60 • Moderate\"\n",
    "    if s <= 90:\n",
    "        return \"61–90 • Significant\"\n",
    "    return \"91–100 • Severe\"\n",
    "\n",
    "results_df[\"severity\"] = results_df[\"abnormality_score\"].astype(float).apply(score_to_severity)\n",
    "\n",
    "# Identify top feature columns present\n",
    "top_feat_cols = [c for c in results_df.columns if re.match(r\"^top_feature_[1-7]$\", str(c))]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "847be759",
   "metadata": {},
   "source": [
    "## 1) Interactive anomaly timeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0caac7fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "x=%{x}<br>abnormality_score=%{y}<extra></extra>",
         "legendgroup": "",
         "line": {
          "color": "#636efa",
          "dash": "solid"
         },
         "marker": {
          "symbol": "circle"
         },
         "mode": "lines",
         "name": "",
         "showlegend": false,
         "type": "scattergl",
         "x": {
          "bdata": "",
          "dtype": "i2"
         },
         "xaxis": "x",
         "y": {
          "bdata": "",
          "dtype": "f8"
         },
         "yaxis": "y"
        },
        {
         "mode": "markers",
         "name": "Significant/Severe",
         "type": "scatter",
         "x": {
          "bdata": "SjBLMEwwTTBOME8wUDBRMFIwUzBUMFUwVjBXMFgwWTBaMFswXDBdMF4wXzBgMGEwYjBjMGQwZTBmMGcwaDBpMGowazBsMG0wbjBvMHAwcTByMHMwdDB1MHYwdzB4MHkwejB7MHwwfTB+MH8wgDCBMIIwgzCEMIUwhjCHMIgwiTCKMIswjDCNMI4wjzCQMJEwkjCTMJQwlTCWMJcwmDCZMJowmzCcMJ0wnjCfMKAwoTCiMKMwpDClMKYwpzCoMKkwqjCrMKwwrTCuMK8wsDCxMLIwszC0MLUwtjC3MLgwuTC6MLswvDC9ML4wvzDAMMEwwjDDMMQwxTDGMMcwyDDJMMowyzDMMM0wzjDPMNAw0TDSMNMw1DDVMNYw1zDYMNkw2jDbMNww3TDeMN8w4DDhMOIw4zDkMOUw5jDnMOgw6TDqMOsw7DDtMO4w7zDwMPEw8jDzMPQw9TD2MPcw+DD5MPow+zD8MP0w/jD/MAAxATECMQMxBDEFMQYxBzEIMQkxCjELMQwxDTEOMQ8xEDERMRIxEzEUMRUxFjEXMRgxGTEaMRsxHDEdMR4xHzEgMSExIjEjMSQxJTEmMScxKDEpMSoxKzEsMS0xLjEvMTAxMTEyMTMxNDE1MTYxNzE4MTkxOjE7MTwxPTE+MT8xQDFBMUIxQzFEMUUxRjFHMUgxSTFKMUsxTDFNMU4xTzFQMVExUjFTMVQxVTFWMVcxWDFZMVoxWzFcMV0xXjFfMWAxYTFiMWMxZDFlMWYxZzFoMWkxajFrMWwxbTFuMW8xcDFxMXIxczF0MXUxdjF3MXgxeTF6MXsxfDF9MX4xfzGAMYExgjGDMYQxhTGGMYcxiDGJMYoxizGMMY0xjjGPMZAxkTGSMZMxlDGVMZYxlzGYMZkxmjGbMZwxnTGeMZ8xoDGhMaIxozGkMaUxpjGnMagxqTGqMasxrDGtMa4xrzGwMbExsjGzMbQxtTG2MbcxuDG5MboxuzG8Mb0xvjG/McAxwTHCMcMxxDHFMcYxxzHIMckxyjHLMcwxzTHOMc8x0DHRMdIx0zHUMdUx1jHXMdgx2THaMdsx3DHdMd4x3zHgMeEx4jHjMeQx5THmMecx6DHpMeox6zHsMe0x7jHvMfAx8THyMfMx9DH1MfYx9zH4Mfkx+jH7Mfwx/TH+Mf8xADIBMgIyAzIEMgUyBjIHMggyCTIKMgsyDDINMg4yDzIQMhEyEjITMhQyFTIWMhcyGDIZMhoyGzIcMh0yHjIfMiAyITIiMiMyJDIlMiYyJzIoMikyKjIrMiwyLTIuMi8yMDIxMjIyMzI0MjUyNjI3MjgyOTI6MjsyPDI9Mj4yPzJAMkEyQjJDMkQyRTJGMkcySDJJMkoySzJMMk0yTjJPMlAyUTJSMlMyVDJVMlYyVzJYMlkyWjJbMlwyXTJeMl8yYDJhMmIyYzJkMmUyZjJnMmgyaTJqMmsybDJtMm4ybzJwMnEycjJzMnQydTJ2MncyeDJ5MnoyezJ8Mn0yfjJ/MoAygTKCMoMyhDKFMoYyhzKIMokyijKLMowyjTKOMo8ykDKRMpIykzKUMpUyljKXMpgymTKaMpsynDKdMp4ynzKgMqEyz13QXdFd0l3TXdRd1V3WXddd2F3ZXdpd213cXd1d3l3fXeBd4V3iXeNd5F3lXeZd513oXeld6l3rXexd7V3uXe9d8F3xXfJd8130XfVd9l33Xfhd+V36Xftd/F39Xf5d/10AXgFeAl4DXgReBV4GXgdeCF4JXgpeC14MXg1eDl4PXhBeEV4SXhNeFF4VXhZeF14YXhleGl4bXhxeHV4eXh9eIF4hXiJeI14kXiVeJl4nXiheKV4qXiteLF4tXi5eL14wXjFeMl4zXjReNV42XjdeOF45XjpeO148Xj1ePl4/XkBeQV5CXkNeRF5FXkZeR15IXkleSl5LXkxeTV5OXk9eUF5RXlJeU15UXlVeVl5XXlheWV5aXlteXF5dXl5eX15gXmFeYl5jXmReZV5mXmdeaF5pXmpea15sXm1ebl5vXnBecV5yXnNedF51XnZed154Xnleel57XnxefV5+Xn9egF6BXoJeg16EXoVehl6HXoheiV6KXotejF6NXo5ej16QXpFekl6TXpRelV6WXpdemF6ZXppem16cXp1enl6fXqBeoV6iXqNepF6lXqZep16oXqleql6rXqxerV6uXq9esF6xXrJes160XrVetl63XrheuV66XrtevF69Xr5ev17AXsFewl7DXsRexV7GXsdeyF7JXspey17MXs1ezl7PXtBe0V7SXtNe1F7VXtZe117YXtle2l7bXtxe3V7eXt9e4F7hXuJe417kXuVe5l7nXuhe6V7qXute7F7tXu5e717wXvFe8l7zXvRe9V72Xvde+F75Xvpe+178Xv1e/l7/XgBfAV8CXwNfBF8FXwZfB18IXwlfCl8LXwxfDV8OXw9fEF8RXxJfE18UXxVfFl8XXxhfGV8aXxtfHF8dXx5fH18gXyFfIl8jXyRfJV8mXydfKF8pXypfK18sXy1fLl8vXzBfMV8yXzNfNF81XzZfN184XzlfOl87XzxfPV8+Xz9fQF9BX0JfQ19EX0VfRl9HX0hfSV9KX0tfTF9NX05fT19QX1FfUl9TX1RfVV9WX1dfWF9ZX1pfW19cX11fXl9fX2BfYV9iX2NfZF9lX2ZfZ19oX2lfal9rX2xfbV9uX29fcF9xX3Jfc190X3Vfdl93X3hfeV96X3tffF99X35ff1+AX4Ffgl+DX4RfhV+GX4dfiF+JX4pfi1+MX41fjl+PX5BfkV+SX5NflF+VX5Zfl1+YX5lfml+bX5xfnV+eX59foF+hXw==",
          "dtype": "i2"
         },
         "y": {
          "bdata": "",
          "dtype": "f8"
         }
        }
       ],
       "layout": {
        "legend": {
         "tracegroupgap": 0
        },
        "shapes": [
         {
          "layer": "below",
          "line": {
           "width": 0
          },
          "type": "rect",
          "x0": 0,
          "x1": 1,
          "xref": "paper",
          "y0": 0,
          "y1": 10,
          "yref": "y"
         },
         {
          "layer": "below",
          "line": {
           "width": 0
          },
          "type": "rect",
          "x0": 0,
          "x1": 1,
          "xref": "paper",
          "y0": 11,
          "y1": 30,
          "yref": "y"
         },
         {
          "layer": "below",
          "line": {
           "width": 0
          },
          "type": "rect",
          "x0": 0,
          "x1": 1,
          "xref": "paper",
          "y0": 31,
          "y1": 60,
          "yref": "y"
         },
         {
          "layer": "below",
          "line": {
           "width": 0
          },
          "type": "rect",
          "x0": 0,
          "x1": 1,
          "xref": "paper",
          "y0": 61,
          "y1": 90,
          "yref": "y"
         },
         {
          "layer": "below",
          "line": {
           "width": 0
          },
          "type": "rect",
          "x0": 0,
          "x1": 1,
          "xref": "paper",
          "y0": 91,
          "y1": 100,
          "yref": "y"
         }
        ],
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Anomaly Score Over Time"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Index"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Abnormality Score (0–100)"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# === INTERACTIVE ANOMALY TIMELINE ===\n",
    "# Tries to use Plotly for interactivity; falls back to Matplotlib if Plotly is unavailable.\n",
    "\n",
    "import math\n",
    "import numpy as np\n",
    "\n",
    "# Severity bands\n",
    "bands = [\n",
    "    (0, 10, \"Normal\"),\n",
    "    (11, 30, \"Slightly unusual\"),\n",
    "    (31, 60, \"Moderate\"),\n",
    "    (61, 90, \"Significant\"),\n",
    "    (91, 100, \"Severe\"),\n",
    "]\n",
    "\n",
    "def plot_interactive_anomaly(df: pd.DataFrame, time_col: Optional[str] = None, score_col: str = \"abnormality_score\"):\n",
    "    try:\n",
    "        import plotly.express as px\n",
    "        import plotly.graph_objects as go\n",
    "        has_plotly = True\n",
    "    except Exception:\n",
    "        has_plotly = False\n",
    "\n",
    "    if has_plotly:\n",
    "        x = df[time_col] if time_col and time_col in df.columns else np.arange(len(df))\n",
    "        fig = px.line(df, x=x, y=score_col, title=\"Anomaly Score Over Time\")\n",
    "        # Add severity rectangles\n",
    "        shapes = []\n",
    "        for lo, hi, label in bands:\n",
    "            shapes.append(dict(\n",
    "                type=\"rect\",\n",
    "                xref=\"paper\", yref=\"y\",\n",
    "                x0=0, x1=1, y0=lo, y1=hi,\n",
    "                fillcolor=None, line=dict(width=0), layer=\"below\"\n",
    "            ))\n",
    "        fig.update_layout(shapes=shapes, yaxis_title=\"Abnormality Score (0–100)\",\n",
    "                          xaxis_title=(time_col if time_col else \"Index\"))\n",
    "        # Add markers for high anomalies\n",
    "        high = df[df[score_col] >= 61]\n",
    "        if not high.empty:\n",
    "            fig.add_trace(go.Scatter(\n",
    "                x=(high[time_col] if time_col and time_col in high.columns else np.arange(len(df))[high.index]),\n",
    "                y=high[score_col],\n",
    "                mode=\"markers\",\n",
    "                name=\"Significant/Severe\",\n",
    "            ))\n",
    "        fig.show()\n",
    "    else:\n",
    "        # Fallback: Matplotlib\n",
    "        import matplotlib.pyplot as plt\n",
    "        x = df[time_col] if time_col and time_col in df.columns else np.arange(len(df))\n",
    "        plt.figure(figsize=(10, 4.5))\n",
    "        plt.plot(x, df[score_col])\n",
    "        plt.title(\"Anomaly Score Over Time\")\n",
    "        plt.xlabel(time_col if time_col else \"Index\")\n",
    "        plt.ylabel(\"Abnormality Score (0–100)\")\n",
    "        for lo, hi, label in bands:\n",
    "            plt.axhspan(lo, hi, alpha=0.05)\n",
    "        # highlight high scores\n",
    "        high_mask = df[score_col] >= 61\n",
    "        if high_mask.any():\n",
    "            plt.scatter(x[high_mask] if not isinstance(x, pd.Series) else x[high_mask].values,\n",
    "                        df.loc[high_mask, score_col])\n",
    "        plt.show()\n",
    "\n",
    "_ = plot_interactive_anomaly(results_df, time_col=TIME_COL, score_col=\"abnormality_score\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2aa96313",
   "metadata": {},
   "source": [
    "## 2) Feature attribution heatmaps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c029a030",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "coloraxis": "coloraxis",
         "hovertemplate": "Top Anomaly Instances: %{x}<br>Features: %{y}<br>Weight: %{z}<extra></extra>",
         "name": "0",
         "type": "heatmap",
         "x": [
          "24379",
          "24378",
          "24404",
          "24377",
          "24375",
          "24376",
          "24374",
          "24403",
          "24177",
          "24178",
          "24179",
          "24176",
          "24402",
          "24373",
          "24175",
          "24173",
          "24380",
          "24174",
          "24172",
          "24401",
          "24171",
          "24372",
          "24334",
          "24189",
          "24170",
          "24180",
          "24400",
          "24405",
          "24169",
          "24393",
          "24159",
          "24333",
          "24188",
          "24168",
          "24479",
          "24371",
          "24381",
          "24399",
          "24394",
          "24167",
          "24319",
          "24392",
          "24332",
          "24478",
          "24187",
          "24160",
          "24318",
          "24398",
          "24181",
          "24166",
          "24335",
          "24395",
          "24396",
          "24190",
          "24158",
          "24317",
          "24477",
          "24397",
          "24370",
          "24161",
          "24331",
          "24186",
          "24391",
          "24320",
          "24382",
          "24165",
          "24162",
          "24316",
          "24224",
          "24182",
          "24163",
          "24476",
          "24209",
          "24406",
          "24330",
          "24164",
          "24225",
          "24321",
          "24185",
          "24208",
          "24199",
          "24223",
          "24390",
          "24336",
          "24157",
          "24315",
          "24383",
          "24191",
          "24369",
          "24475",
          "24200",
          "24226",
          "24322",
          "24183",
          "24207",
          "24368",
          "24364",
          "24365",
          "24198",
          "24329",
          "24366",
          "24274",
          "24201",
          "24367",
          "24344",
          "24328",
          "24222",
          "24206",
          "24314",
          "24249",
          "24227",
          "24228",
          "24323",
          "24229",
          "24275",
          "24363",
          "24474",
          "24248",
          "24184",
          "24327",
          "24345",
          "24247",
          "24250",
          "24197",
          "24202",
          "24276",
          "24343",
          "24273",
          "24246",
          "24244",
          "24205",
          "24253",
          "24210",
          "24252",
          "24251",
          "24243",
          "24254",
          "24389",
          "24245",
          "24337",
          "24384",
          "24277",
          "24313",
          "24278",
          "24203",
          "24388",
          "24242",
          "24326",
          "24279",
          "24362",
          "24221",
          "24192",
          "24346",
          "24385",
          "24387",
          "24386",
          "24324",
          "24156",
          "24407",
          "24241",
          "24272",
          "24196",
          "24312",
          "24264",
          "24240",
          "24424",
          "24204",
          "24342",
          "24325",
          "24280",
          "24347",
          "24414",
          "24255",
          "24425",
          "24239",
          "24473",
          "24361",
          "24348",
          "24263",
          "24349",
          "24439",
          "24350",
          "24351",
          "24311",
          "24352",
          "24281",
          "24271",
          "24426",
          "24353",
          "24438",
          "24195",
          "24265",
          "24211",
          "24440",
          "24427",
          "24294",
          "24193",
          "24360",
          "24220",
          "24437"
         ],
         "xaxis": "x",
         "y": [
          "ComponentD9",
          "ComponentE6",
          "ComponentG11",
          "DFeedFlowStream2",
          "EFeedFlowStream3",
          "ProdSepPressurekPagauge",
          "PurgeValveStream9",
          "ReactorFeedRateStream6",
          "TotalFeedFlowStream4",
          "TotalFeedStream4"
         ],
         "yaxis": "y",
         "z": {
          "bdata",
          "dtype": "f8",
          "shape": "10, 200"
         }
        }
       ],
       "layout": {
        "coloraxis": {
         "colorbar": {
          "title": {
           "text": "Weight"
          }
         },
         "colorscale": [
          [
           0,
           "#0d0887"
          ],
          [
           0.1111111111111111,
           "#46039f"
          ],
          [
           0.2222222222222222,
           "#7201a8"
          ],
          [
           0.3333333333333333,
           "#9c179e"
          ],
          [
           0.4444444444444444,
           "#bd3786"
          ],
          [
           0.5555555555555556,
           "#d8576b"
          ],
          [
           0.6666666666666666,
           "#ed7953"
          ],
          [
           0.7777777777777778,
           "#fb9f3a"
          ],
          [
           0.8888888888888888,
           "#fdca26"
          ],
          [
           1,
           "#f0f921"
          ]
         ]
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Feature Attribution Heatmap (weighted by rank)"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Top Anomaly Instances"
         }
        },
        "yaxis": {
         "anchor": "x",
         "autorange": "reversed",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Features"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# === FEATURE ATTRIBUTION HEATMAPS ===\n",
    "# Build a feature-by-instance matrix from top_feature_1..7, weighted by rank (7 -> top weight to top_feature_1).\n",
    "# Then plot a heatmap for the top N anomalies.\n",
    "\n",
    "from collections import Counter, defaultdict\n",
    "\n",
    "def build_attribution_matrix(df: pd.DataFrame, top_feat_cols: List[str], top_n: int = 200) -> pd.DataFrame:\n",
    "    if not top_feat_cols:\n",
    "        raise ValueError(\"No top_feature_1..7 columns found. Cannot build attribution heatmap.\")\n",
    "    # Select top N most anomalous rows\n",
    "    sub = df.nlargest(top_n, \"abnormality_score\").copy()\n",
    "    # Weighted contribution: top_feature_1 gets weight 7, ... top_feature_7 weight 1\n",
    "    weights = {f\"top_feature_{i}\": (8 - i) for i in range(1, 8)}\n",
    "    # Collect all unique feature names present\n",
    "    features = set()\n",
    "    for c in top_feat_cols:\n",
    "        features.update(sub[c].dropna().astype(str).tolist())\n",
    "    features = sorted([f for f in features if f and f.lower() != \"nan\"])\n",
    "    # Build matrix\n",
    "    mat = np.zeros((len(features), len(sub)), dtype=float)\n",
    "    feat_to_idx = {f: i for i, f in enumerate(features)}\n",
    "    for j, (_, row) in enumerate(sub.iterrows()):\n",
    "        for c in top_feat_cols:\n",
    "            f = str(row.get(c, \"\"))\n",
    "            if not f or f.lower() == \"nan\":\n",
    "                continue\n",
    "            i = feat_to_idx.get(f)\n",
    "            if i is not None:\n",
    "                mat[i, j] += weights.get(c, 1.0)\n",
    "    # Create DataFrame\n",
    "    heat_df = pd.DataFrame(mat, index=features, columns=sub.index.astype(str))\n",
    "    return heat_df, sub\n",
    "\n",
    "def plot_heatmap(heat_df: pd.DataFrame):\n",
    "    try:\n",
    "        import plotly.express as px\n",
    "        has_plotly = True\n",
    "    except Exception:\n",
    "        has_plotly = False\n",
    "\n",
    "    if has_plotly:\n",
    "        fig = px.imshow(\n",
    "            heat_df,\n",
    "            aspect=\"auto\",\n",
    "            origin=\"lower\",\n",
    "            title=\"Feature Attribution Heatmap (weighted by rank)\",\n",
    "            labels=dict(x=\"Top Anomaly Instances\", y=\"Features\", color=\"Weight\")\n",
    "        )\n",
    "        fig.update_yaxes(autorange=\"reversed\")\n",
    "        fig.show()\n",
    "    else:\n",
    "        import matplotlib.pyplot as plt\n",
    "        plt.figure(figsize=(10, max(6, len(heat_df)//3)))\n",
    "        plt.imshow(heat_df.values, aspect=\"auto\", origin=\"lower\")\n",
    "        plt.colorbar(label=\"Weight\")\n",
    "        plt.yticks(range(len(heat_df.index)), heat_df.index)\n",
    "        plt.xticks([])\n",
    "        plt.title(\"Feature Attribution Heatmap (weighted by rank)\")\n",
    "        plt.show()\n",
    "\n",
    "heat_df, top_subset = build_attribution_matrix(results_df, top_feat_cols, top_n=200)\n",
    "plot_heatmap(heat_df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7aed81ac",
   "metadata": {},
   "source": [
    "## 3) Automatic anomaly severity reports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "95099913",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Anomaly Severity Summary ===\n",
      "{\n",
      "  \"counts\": {\n",
      "    \"0\\u201310 \\u2022 Normal\": 12497,\n",
      "    \"11\\u201330 \\u2022 Slightly unusual\": 9192,\n",
      "    \"31\\u201360 \\u2022 Moderate\": 3630,\n",
      "    \"61\\u201390 \\u2022 Significant\": 1081\n",
      "  },\n",
      "  \"percentages\": {\n",
      "    \"0\\u201310 \\u2022 Normal\": 47.33712121212121,\n",
      "    \"11\\u201330 \\u2022 Slightly unusual\": 34.81818181818182,\n",
      "    \"31\\u201360 \\u2022 Moderate\": 13.75,\n",
      "    \"61\\u201390 \\u2022 Significant\": 4.09469696969697\n",
      "  },\n",
      "  \"total_rows\": 26400\n",
      "}\n",
      "\n",
      "=== Overall Top Contributing Features ===\n",
      "StripperLevel: 15077\n",
      "StripperLiquidProductFlowStream11: 13327\n",
      "ProductSepLevel: 11158\n",
      "SeparatorPotLiquidFlowStream10: 9450\n",
      "StripperSteamFlowkgperhr: 4872\n",
      "StripperUnderflowStream11: 4859\n",
      "ComponentD11: 4857\n",
      "ProdSepUnderflowStream10: 4100\n",
      "ComponentG9: 4093\n",
      "ReactorTemperatureDegC: 3825\n",
      "RecycleFlowStream8: 3806\n",
      "PurgeValveStream9: 3692\n",
      "PurgeRateStream9: 3618\n",
      "ComponentC9: 3498\n",
      "ProductSepTempDegC: 3449\n",
      "ComponentE6: 3438\n",
      "TotalFeedStream4: 3341\n",
      "EFeedStream3: 3270\n",
      "AFeedStream1: 3269\n",
      "ComponentA6: 3198\n",
      "\n",
      "=== Top Contributing Features by Severity ===\n",
      "\n",
      "0–10 • Normal\n",
      "  StripperLevel: 10149\n",
      "  StripperLiquidProductFlowStream11: 9471\n",
      "  ProductSepLevel: 8025\n",
      "  SeparatorPotLiquidFlowStream10: 7337\n",
      "  StripperUnderflowStream11: 3595\n",
      "  ComponentD11: 3572\n",
      "  ProdSepUnderflowStream10: 2900\n",
      "  RecycleFlowStream8: 2596\n",
      "  ComponentH11: 2108\n",
      "  ComponentG11: 1693\n",
      "\n",
      "11–30 • Slightly unusual\n",
      "  StripperLevel: 4763\n",
      "  StripperLiquidProductFlowStream11: 3718\n",
      "  ProductSepLevel: 3082\n",
      "  ReactorTemperatureDegC: 2309\n",
      "  ReactorCoolingWaterOutletTempDegC: 2123\n",
      "  SeparatorPotLiquidFlowStream10: 2088\n",
      "  StripperSteamFlowkgperhr: 1767\n",
      "  ReactorCoolingWaterFlow: 1703\n",
      "  AFeedStream1: 1603\n",
      "  CompressorWorkkW: 1422\n",
      "\n",
      "31–60 • Moderate\n",
      "  StripperSteamFlowkgperhr: 1872\n",
      "  ProductSepTempDegC: 1517\n",
      "  PurgeValveStream9: 1312\n",
      "  StripperSteamValve: 1287\n",
      "  StripperTemperatureDegC: 1159\n",
      "  PurgeRateStream9: 1143\n",
      "  ReactorPressurekPagauge: 1028\n",
      "  EFeedStream3: 952\n",
      "  ComponentG9: 913\n",
      "  ComponentE6: 899\n",
      "\n",
      "61–90 • Significant\n",
      "  ProductSepTempDegC: 626\n",
      "  StripperSteamFlowkgperhr: 608\n",
      "  ComponentC9: 608\n",
      "  ComponentA6: 606\n",
      "  ComponentG9: 601\n",
      "  ComponentC6: 591\n",
      "  PurgeValveStream9: 473\n",
      "  ComponentE6: 473\n",
      "  TotalFeedStream4: 472\n",
      "  ReactorFeedRateStream6: 471\n",
      "\n",
      "Artifacts saved in ./anomaly_reports/\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# === AUTOMATIC ANOMALY SEVERITY REPORT ===\n",
    "\n",
    "from collections import Counter\n",
    "import json\n",
    "\n",
    "def severity_summary(df: pd.DataFrame) -> Dict[str, Dict[str, float]]:\n",
    "    total = len(df)\n",
    "    counts = df[\"severity\"].value_counts().to_dict()\n",
    "    perc = {k: (v * 100.0 / total if total else 0.0) for k, v in counts.items()}\n",
    "    return {\"counts\": counts, \"percentages\": perc, \"total_rows\": total}\n",
    "\n",
    "def top_features_overall(df: pd.DataFrame, top_feat_cols: List[str], k: int = 15) -> List[Tuple[str, int]]:\n",
    "    cnt = Counter()\n",
    "    for c in top_feat_cols:\n",
    "        cnt.update(df[c].dropna().astype(str).tolist())\n",
    "    # remove empty/'nan'\n",
    "    clean = Counter({f:v for f,v in cnt.items() if f and f.lower() != \"nan\"})\n",
    "    return clean.most_common(k)\n",
    "\n",
    "def top_features_by_severity(df: pd.DataFrame, top_feat_cols: List[str], k: int = 10) -> Dict[str, List[Tuple[str, int]]]:\n",
    "    out = {}\n",
    "    for sev, grp in df.groupby(\"severity\"):\n",
    "        out[sev] = top_features_overall(grp, top_feat_cols, k=k)\n",
    "    return out\n",
    "\n",
    "report = severity_summary(results_df)\n",
    "overall_top = top_features_overall(results_df, top_feat_cols, k=20)\n",
    "by_sev = top_features_by_severity(results_df, top_feat_cols, k=10)\n",
    "\n",
    "print(\"=== Anomaly Severity Summary ===\")\n",
    "print(json.dumps(report, indent=2))\n",
    "print(\"\\n=== Overall Top Contributing Features ===\")\n",
    "for f, c in overall_top:\n",
    "    print(f\"{f}: {c}\")\n",
    "print(\"\\n=== Top Contributing Features by Severity ===\")\n",
    "for sev, items in by_sev.items():\n",
    "    print(f\"\\n{sev}\")\n",
    "    for f, c in items:\n",
    "        print(f\"  {f}: {c}\")\n",
    "\n",
    "# Export as CSV/JSON artifacts for your report\n",
    "out_dir = \"anomaly_reports\"\n",
    "import os\n",
    "os.makedirs(out_dir, exist_ok=True)\n",
    "\n",
    "pd.DataFrame({\"severity\": list(report[\"counts\"].keys()), \"count\": list(report[\"counts\"].values())}).to_csv(\n",
    "    os.path.join(out_dir, \"severity_counts.csv\"), index=False\n",
    ")\n",
    "\n",
    "pd.DataFrame(overall_top, columns=[\"feature\", \"count\"]).to_csv(\n",
    "    os.path.join(out_dir, \"top_features_overall.csv\"), index=False\n",
    ")\n",
    "\n",
    "# Breakout per severity\n",
    "for sev, items in by_sev.items():\n",
    "    safe = sev.replace(\"•\", \"-\").replace(\" \", \"_\").replace(\"–\", \"-\")\n",
    "    pd.DataFrame(items, columns=[\"feature\", \"count\"]).to_csv(\n",
    "        os.path.join(out_dir, f\"top_features_{safe}.csv\"), index=False\n",
    "    )\n",
    "\n",
    "with open(os.path.join(out_dir, \"summary.json\"), \"w\") as f:\n",
    "    json.dump({\"summary\": report, \"overall_top\": overall_top, \"by_severity\": by_sev}, f, indent=2)\n",
    "\n",
    "print(\"\\nArtifacts saved in ./anomaly_reports/\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c891b97c",
   "metadata": {},
   "source": [
    "## Quick severity bar chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6d9112dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hovertemplate": "severity=%{x}<br>count=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "",
         "orientation": "v",
         "showlegend": false,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "0–10 • Normal",
          "11–30 • Slightly unusual",
          "31–60 • Moderate",
          "61–90 • Significant"
         ],
         "xaxis": "x",
         "y": {
          "bdata": "0TDoIy4OOQQ=",
          "dtype": "i2"
         },
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "relative",
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermap": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermap"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Anomaly Severity Distribution"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "severity"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "count"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# === OPTIONAL: Visual bar chart of severity counts ===\n",
    "import pandas as pd\n",
    "\n",
    "sev_counts = results_df[\"severity\"].value_counts().reset_index()\n",
    "sev_counts.columns = [\"severity\", \"count\"]\n",
    "\n",
    "try:\n",
    "    import plotly.express as px\n",
    "    fig = px.bar(sev_counts, x=\"severity\", y=\"count\", title=\"Anomaly Severity Distribution\")\n",
    "    fig.show()\n",
    "except Exception:\n",
    "    import matplotlib.pyplot as plt\n",
    "    plt.figure(figsize=(8,4))\n",
    "    plt.bar(sev_counts[\"severity\"], sev_counts[\"count\"])\n",
    "    plt.title(\"Anomaly Severity Distribution\")\n",
    "    plt.xlabel(\"Severity\")\n",
    "    plt.ylabel(\"Count\")\n",
    "    plt.xticks(rotation=45, ha=\"right\")\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  },
  "provenance": [
   {
    "action": "polish_pep8_and_docs",
    "notes": "Added docstring to _scale if missing; wrapped long comments/string literals >100 cols."
   }
  ]
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
